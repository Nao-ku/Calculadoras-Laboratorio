# -*- coding: utf-8 -*-
"""Calculadora 1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fSEL__10UgQYzYfYYF_ccVsx98tQptQE

#Calculadora de Conjuntos Y Binarios
"""

def menu():
    print("\nCalculadora de Conjuntos y Sistemas Numéricos")
    print("1. Operaciones con Conjuntos")
    print("2. Conversión de Números Binarios y Decimales")
    print("3. Salir")
    opcion = input("Seleccione una opción: ")
    return opcion

def ingresar_conjuntos():
    conjuntos = {}
    n = int(input("Ingrese la cantidad de conjuntos que desea manejar: "))
    for i in range(n):
        nombre = input(f"Nombre del conjunto {i+1}: ")
        elementos = set()
        elementos_str = input(f"Ingrese los elementos para el conjunto {nombre} separados por espacios: ")
        for elemento in elementos_str.split():
            try:
                elementos.add(int(elemento))
            except ValueError:
                print(f"Elemento inválido: '{elemento}'. Ignorando.")
        conjuntos[nombre] = elementos
    return conjuntos

def calcular_subconjuntos(conjunto):
    from itertools import chain, combinations
    return list(chain.from_iterable(combinations(conjunto, r) for r in range(len(conjunto) + 1)))

def operaciones_conjuntos():
    conjuntos = ingresar_conjuntos()
    print("Conjuntos ingresados:")
    for nombre, elementos in conjuntos.items():
        print(f"{nombre}: {elementos}")

    seleccionados = input("Ingrese los nombres de los conjuntos a operar separados por espacios: ").split()
    if not all(conj in conjuntos for conj in seleccionados):
        print("Uno o más conjuntos no existen.")
        return

    conjuntos_seleccionados = [conjuntos[nombre] for nombre in seleccionados]

    print("1. Unión (A ∪ B ∪ ... ∪ N)")
    print("2. Intersección (A ∩ B ∩ ... ∩ N)")
    print("3. Diferencia (A - B - ... - N)")
    print("4. Subconjuntos de un conjunto")
    print("5. Relación binaria entre dos conjuntos")
    print("6. Conjunto Universal")
    opcion = input("Seleccione una operación: ")

    if opcion == "1":
        resultado = set.union(*conjuntos_seleccionados)
        print(f"Unión: {resultado}")
    elif opcion == "2":
        resultado = set.intersection(*conjuntos_seleccionados)
        print(f"Intersección: {resultado}")
    elif opcion == "3":
        resultado = conjuntos_seleccionados[0].copy()
        for conjunto in conjuntos_seleccionados[1:]:
            resultado -= conjunto
        print(f"Diferencia: {resultado}")
    elif opcion == "4":
        nombre_conjunto = seleccionados[0]
        subconjuntos = calcular_subconjuntos(conjuntos[nombre_conjunto])
        print(f"Subconjuntos de {nombre_conjunto}: {subconjuntos}")
    elif opcion == "5":
        if len(seleccionados) < 2:
            print("Debe seleccionar dos conjuntos para una relación binaria.")
        else:
            A, B = conjuntos_seleccionados[:2]
            relacion = {(a, b) for a in A for b in B}
            print(f"Relación binaria entre {seleccionados[0]} y {seleccionados[1]}: {relacion}")
    elif opcion == "6":
        universal = set.union(*conjuntos.values())
        print(f"Conjunto Universal: {universal}")
    else:
        print("Opción inválida.")

def conversion_numerica():
    print("\nConversión de Números Binarios y Decimales")
    print("1. Decimal a Binario")
    print("2. Binario a Decimal")
    opcion = input("Seleccione una opción: ")

    if opcion == "1":
        decimal = int(input("Ingrese un número decimal: "))
        print(f"El número {decimal} en binario es: {bin(decimal)[2:]}")
    elif opcion == "2":
        binario = input("Ingrese un número binario: ")
        print(f"El número {binario} en decimal es: {int(binario, 2)}")
    else:
        print("Opción inválida.")

while True:
    opcion = menu()
    if opcion == "1":
        operaciones_conjuntos()
    elif opcion == "2":
        conversion_numerica()
    elif opcion == "3":
        print("Saliendo...")
        break
    else:
        print("Opción inválida, intente nuevamente.")