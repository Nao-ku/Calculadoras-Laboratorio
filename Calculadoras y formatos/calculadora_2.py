# -*- coding: utf-8 -*-
"""Calculadora 2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1N8wKyKACqlC0dxtTOb1kXGlPDYVLn3FF

#Calculadora Tabla de Verdades
"""

def evaluar_expresion(expresion, valores):
    """Evalúa la expresión lógica."""

    expresion = expresion.replace("¬", " not ")
    expresion = expresion.replace("∧", " and ")
    expresion = expresion.replace("∨", " or ")
    expresion = expresion.replace("→", " <= ")
    expresion = expresion.replace("↔", " == ")



    for i in range(len(variables)):
        expresion = expresion.replace(variables[i], str(valores[i]))


    try:


        local_vars = {}
        eval("resultado = " + expresion, globals(), local_vars)
        return int(local_vars['resultado'])
    except:
        return "Error"


def generar_tabla(variables, expresion):
    """Genera la tabla de verdad."""

    num_variables = len(variables)


    print(" ".join(variables) + " | Resultado")
    print("-" * (len(variables) * 2 + 10))

    for i in range(2**num_variables):
        combinacion = []
        for j in range(num_variables):
            if (i >> j) & 1:
                combinacion.append(1)
            else:
                combinacion.append(0)

        resultado = evaluar_expresion(expresion, combinacion)

        print(" ".join(str(val) for val in combinacion) + " | " + str(resultado))

if __name__ == "__main__":
    while True:
        expresion = input("Ingrese la expresión lógica (¬, ∧, ∨, →, ↔) o 'salir' para terminar: ")
        if expresion.lower() == "salir":
            break


        variables = []
        for caracter in expresion:
            if caracter.isalpha() and caracter not in variables:
                variables.append(caracter)

        generar_tabla(variables, expresion)